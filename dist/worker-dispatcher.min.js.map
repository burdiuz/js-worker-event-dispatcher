{"version":3,"file":"worker-dispatcher.min.js","sources":["../source/WorkerType.js","../node_modules/@actualwave/has-own/has-own.js","../node_modules/@actualwave/event-dispatcher/index.js","../source/WorkerEvent.js","../node_modules/@actualwave/messageport-dispatcher/index.js","../source/AbstractDispatcher.js","../source/DedicatedWorkerDispatcher.js","../source/SharedWorkerDispatcher.js","../source/sharedWorker/ClientDispatcher.js","../source/sharedWorker/ServerDispatcher.js","../source/index.js","../source/utils/create.js"],"sourcesContent":["const WorkerType = {\n  DEDICATED_WORKER: 'dedicated',\n  SHARED_WORKER: 'shared',\n  /**\n   * @private\n   */\n  SHARED_WORKER_SERVER: 'sharedServer',\n  /**\n   * @private\n   */\n  SHARED_WORKER_CLIENT: 'sharedClient',\n};\n\nexport default WorkerType;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\n\n/**\n *      \n */\n\n/* eslint-disable import/prefer-default-export */\nconst isObject = value => typeof value === 'object' && value !== null;\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass Event {\n  constructor(type, data = null) {\n    this.type = type;\n    this.data = data;\n    this.defaultPrevented = false;\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      data: this.data\n    };\n  }\n\n  isDefaultPrevented() {\n    return this.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\nconst getEvent = (eventOrType, optionalData) => {\n  let event = eventOrType;\n\n  if (!isObject(eventOrType)) {\n    event = new Event(String(eventOrType), optionalData);\n  }\n\n  return event;\n};\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass ListenersRunner {\n  constructor(listeners, onStopped, onComplete) {\n    this.index = -1;\n    this.immediatelyStopped = false;\n\n    this.stopImmediatePropagation = () => {\n      this.immediatelyStopped = true;\n    };\n\n    this.listeners = listeners;\n    this.onStopped = onStopped;\n    this.onComplete = onComplete;\n  }\n\n  run(event, target) {\n    let listener;\n    const {\n      listeners\n    } = this;\n    this.augmentEvent(event); // TODO this has to be handled in separate object ListenersRunner that should be\n    // created for each call() call and asked for index validation on each listener remove.\n\n    for (this.index = 0; this.index < listeners.length; this.index++) {\n      if (this.immediatelyStopped) break;\n      listener = listeners[this.index];\n      listener.call(target, event);\n    }\n\n    this.clearEvent(event);\n    this.onComplete(this);\n  }\n\n  augmentEvent(eventObject) {\n    const event = eventObject;\n    event.stopPropagation = this.onStopped;\n    event.stopImmediatePropagation = this.stopImmediatePropagation;\n  }\n  /* eslint class-methods-use-this: \"off\" */\n\n\n  clearEvent(eventObject) {\n    const event = eventObject;\n    delete event.stopPropagation;\n    delete event.stopImmediatePropagation;\n  }\n\n  listenerRemoved(listeners, index) {\n    if (listeners === this.listeners && index <= this.index) {\n      this.index--;\n    }\n  }\n\n}\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass EventListeners {\n  constructor() {\n    this._listeners = {};\n    this._runners = [];\n\n    this.removeRunner = runner => {\n      this._runners.splice(this._runners.indexOf(runner), 1);\n    };\n  }\n\n  createList(eventType, priorityOpt) {\n    const priority = parseInt(priorityOpt, 10);\n    const target = this.getPrioritiesByKey(eventType);\n    const key = String(priority);\n    let value;\n\n    if (hasOwn(target, key)) {\n      value = target[key];\n    } else {\n      value = [];\n      target[key] = value;\n    }\n\n    return value;\n  }\n\n  getPrioritiesByKey(key) {\n    let value;\n\n    if (hasOwn(this._listeners, key)) {\n      value = this._listeners[key];\n    } else {\n      value = {};\n      this._listeners[key] = value;\n    }\n\n    return value;\n  }\n\n  add(eventType, handler, priority) {\n    const handlers = this.createList(eventType, priority);\n\n    if (handlers.indexOf(handler) < 0) {\n      handlers.push(handler);\n    }\n  }\n\n  has(eventType) {\n    let priority;\n    let result = false;\n    const priorities = this.getPrioritiesByKey(eventType);\n\n    if (priorities) {\n      for (priority in priorities) {\n        if (hasOwn(priorities, priority)) {\n          result = true;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  remove(eventType, handler) {\n    const priorities = this.getPrioritiesByKey(eventType);\n\n    if (priorities) {\n      const list = Object.getOwnPropertyNames(priorities);\n      const {\n        length\n      } = list;\n\n      for (let index = 0; index < length; index++) {\n        const priority = list[index];\n        const handlers = priorities[priority];\n        const handlerIndex = handlers.indexOf(handler);\n\n        if (handlerIndex >= 0) {\n          handlers.splice(handlerIndex, 1);\n\n          if (!handlers.length) {\n            delete priorities[priority];\n          }\n\n          this._runners.forEach(runner => {\n            runner.listenerRemoved(handlers, handlerIndex);\n          });\n        }\n      }\n    }\n  }\n\n  removeAll(eventType) {\n    delete this._listeners[eventType];\n  }\n\n  createRunner(handlers, onStopped) {\n    const runner = new ListenersRunner(handlers, onStopped, this.removeRunner);\n\n    this._runners.push(runner);\n\n    return runner;\n  }\n\n  call(event, target) {\n    const priorities = this.getPrioritiesByKey(event.type);\n    let stopped = false;\n\n    const stopPropagation = () => {\n      stopped = true;\n    };\n\n    if (priorities) {\n      // getOwnPropertyNames() or keys()?\n      const list = Object.getOwnPropertyNames(priorities).sort((a, b) => a - b);\n      const {\n        length\n      } = list;\n\n      for (let index = 0; index < length; index++) {\n        if (stopped) break;\n        const handlers = priorities[list[index]]; // in case if all handlers of priority were removed while event\n        // was dispatched and handlers become undefined.\n\n        if (handlers) {\n          const runner = this.createRunner(handlers, stopPropagation);\n          runner.run(event, target);\n          if (runner.immediatelyStopped) break;\n        }\n      }\n    }\n  }\n\n}\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\n\nclass EventDispatcher {\n  constructor(eventPreprocessor = null) {\n    this._eventPreprocessor = eventPreprocessor;\n    this._listeners = new EventListeners();\n  }\n\n  addEventListener(eventType, listener, priority = 0) {\n    this._listeners.add(eventType, listener, -priority || 0);\n  }\n\n  hasEventListener(eventType) {\n    return this._listeners.has(eventType);\n  }\n\n  removeEventListener(eventType, listener) {\n    this._listeners.remove(eventType, listener);\n  }\n\n  removeAllEventListeners(eventType) {\n    this._listeners.removeAll(eventType);\n  }\n\n  dispatchEvent(event, data) {\n    let eventObject = getEvent(event, data);\n\n    if (this._eventPreprocessor) {\n      eventObject = this._eventPreprocessor.call(this, eventObject);\n    }\n\n    this._listeners.call(eventObject);\n  }\n\n}\n\nconst createEventDispatcher = eventPreprocessor => new EventDispatcher(eventPreprocessor);\n\nexports.default = EventDispatcher;\nexports.Event = Event;\nexports.EventDispatcher = EventDispatcher;\nexports.createEventDispatcher = createEventDispatcher;\nexports.getEvent = getEvent;\nexports.isObject = isObject;\n//# sourceMappingURL=index.js.map\n","import { Event } from '@actualwave/event-dispatcher';\n\nexport const NativeEventTypes = {\n  CONNECT: 'connect',\n  MESSAGE: 'message',\n  ERROR: 'error',\n  LANGUAGECHANGE: 'languagechange',\n  ONLINE: 'online',\n  OFFLINE: 'offline',\n};\n\nclass WorkerEvent extends Event {\n  static CONNECT = 'worker:connect';\n\n  static MESSAGE = 'worker:message';\n\n  static ERROR = 'worker:error';\n\n  static LANGUAGECHANGE = 'worker:languagechange';\n\n  static ONLINE = 'worker:online';\n\n  static OFFLINE = 'worker:offline';\n\n  constructor(type, data, sourceEvent, client) {\n    super(type, data);\n    this.sourceEvent = sourceEvent;\n    this.client = client;\n  }\n}\n\nexport const getWorkerEventType = (type) => {\n  switch (type) {\n    case NativeEventTypes.CONNECT:\n      return WorkerEvent.CONNECT;\n    case NativeEventTypes.MESSAGE:\n      return WorkerEvent.MESSAGE;\n    case NativeEventTypes.ERROR:\n      return WorkerEvent.ERROR;\n    case NativeEventTypes.LANGUAGECHANGE:\n      return WorkerEvent.LANGUAGECHANGE;\n    case NativeEventTypes.ONLINE:\n      return WorkerEvent.ONLINE;\n    case NativeEventTypes.OFFLINE:\n      return WorkerEvent.OFFLINE;\n    default:\n      return null;\n  }\n};\n\nexport const dispatchWorkerEvent = (type, source, target) => {\n  const eventType = getWorkerEventType(type);\n\n  const handler = (event) => {\n    if (target.hasEventListener(eventType)) {\n      target.dispatchEvent(new WorkerEvent(eventType, event, event));\n    }\n  };\n\n  source.addEventListener(type, handler);\n  return handler;\n};\n\nexport const dispatchWorkerEvents = (source, target) => {\n  dispatchWorkerEvent(NativeEventTypes.ERROR, source, target);\n  dispatchWorkerEvent(NativeEventTypes.LANGUAGECHANGE, source, target);\n  dispatchWorkerEvent(NativeEventTypes.ONLINE, source, target);\n  dispatchWorkerEvent(NativeEventTypes.OFFLINE, source, target);\n};\n\nexport const dispatchWorkerErrorEvent = (source, target) => {\n  dispatchWorkerEvent(NativeEventTypes.ERROR, source, target);\n};\n\nexport default WorkerEvent;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar eventDispatcher = require('@actualwave/event-dispatcher');\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\n\n/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\nconst createId = () => `MP/${Math.ceil(Math.random() * 10000)}/${Date.now()}`;\n/**\r\n * If toJSON method implemented on object, it will be called instead of converting to JSON string.\r\n * This was made to utilize structured cloning algorithm for raw objects.\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\r\n * In this case developer is responsible for converting linked objects.\r\n * @param object\r\n * @returns {Object}\r\n */\n\nconst toRawData = object => {\n  if (typeof object.toJSON === 'function') {\n    return object.toJSON();\n  }\n\n  return JSON.stringify(object);\n};\n/**\r\n *\r\n * @param data {Object|String}\r\n * @returns {Object}\r\n */\n\nconst parseRawData = data => {\n  let object; // keep it undefined in case of error\n\n  if (eventDispatcher.isObject(data)) {\n    return data;\n  }\n\n  try {\n    return JSON.parse(data);\n  } catch (error) {// this isn't an event we are waiting for.\n  }\n\n  return object;\n};\n\n/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\nclass MessagePortEvent {\n  constructor(event, dispatcherId) {\n    this.event = event;\n    this.dispatcherId = dispatcherId;\n  }\n\n  toJSON() {\n    return {\n      event: toRawData(this.event),\n      dispatcherId: this.dispatcherId\n    };\n  }\n\n}\nconst isMessagePortEvent = object => eventDispatcher.isObject(object) && hasOwn(object, 'dispatcherId') && hasOwn(object, 'event');\nconst parseMessagePortEvent = object => {\n  const result = parseRawData(object);\n\n  if (result && isMessagePortEvent(result)) {\n    const {\n      event,\n      dispatcherId\n    } = result;\n    return new MessagePortEvent(parseRawData(event), dispatcherId);\n  }\n\n  return null;\n};\n\n/**\r\n * Created by Oleg Galaburda on 09.02.16.\r\n */\nclass MessagePortDispatcher {\n  constructor(target = null, customPostMessageHandler = null, receiverEventPreprocessor = null, senderEventPreprocessor = null) {\n    this.dispatcherId = createId();\n    this.targetOrigin = '*';\n    this.target = target || self;\n    this.customPostMessageHandler = customPostMessageHandler;\n    this.senderEventPreprocessor = senderEventPreprocessor;\n    this.sender = eventDispatcher.createEventDispatcher();\n    this.receiver = eventDispatcher.createEventDispatcher(receiverEventPreprocessor);\n    this.target.addEventListener('message', event => this._postMessageListener(event));\n  }\n\n  addEventListener(eventType, listener, priority) {\n    this.receiver.addEventListener(eventType, listener, priority);\n  }\n\n  hasEventListener(eventType) {\n    return this.receiver.hasEventListener(eventType);\n  }\n\n  removeEventListener(eventType, listener) {\n    this.receiver.removeEventListener(eventType, listener);\n  }\n\n  removeAllEventListeners(eventType) {\n    this.receiver.removeAllEventListeners(eventType);\n  }\n\n  dispatchEvent(eventType, data, transferList) {\n    let event = eventDispatcher.getEvent(eventType, data);\n\n    if (this.senderEventPreprocessor) {\n      event = this.senderEventPreprocessor.call(this, event);\n    }\n\n    const eventJson = toRawData(new MessagePortEvent(event, this.dispatcherId));\n    return this._postMessageHandler(eventJson, transferList);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _postMessageHandler(data, transferList) {\n    const handler = this.customPostMessageHandler;\n\n    if (handler) {\n      return handler.call(this, data, this.targetOrigin, transferList);\n    }\n\n    return this.target.postMessage(data, this.targetOrigin, transferList);\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _postMessageListener(event) {\n    // INFO .nativeEvent react-native thing, it contains event object coming from WebView\n    event = event.nativeEvent || event;\n    const message = parseMessagePortEvent(event.data);\n\n    if (message) {\n      if (message.dispatcherId === this.dispatcherId) {\n        this.sender.dispatchEvent(message.event);\n      } else {\n        this.receiver.dispatchEvent(message.event);\n      }\n    }\n  }\n\n}\nconst createMessagePortDispatcher = (target, customPostMessageHandler, receiverEventPreprocessor, senderEventPreprocessor) => new MessagePortDispatcher(target, customPostMessageHandler, receiverEventPreprocessor, senderEventPreprocessor);\nconst factory = (getTarget, dispatcher = null) => () => {\n  if (!dispatcher) {\n    dispatcher = createMessagePortDispatcher(getTarget());\n  }\n\n  return dispatcher;\n};\nconst getForSelf = factory(() => self);\nconst getForParent = factory(() => parent);\nconst getForTop = factory(() => top);\n\nexports.default = MessagePortDispatcher;\nexports.MessagePortDispatcher = MessagePortDispatcher;\nexports.MessagePortEvent = MessagePortEvent;\nexports.factory = factory;\nexports.getForSelf = getForSelf;\nexports.getForParent = getForParent;\nexports.getForTop = getForTop;\nexports.createMessagePortDispatcher = createMessagePortDispatcher;\n//# sourceMappingURL=index.js.map\n","import MessagePortDispatcher from '@actualwave/messageport-dispatcher';\n\n/**\n *\n * @param target {String|Worker}\n * @param customPostMessageHandler {?Function}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass AbstractDispatcher extends MessagePortDispatcher {\n  constructor(\n    type,\n    target,\n    receiverEventPreprocessor = null,\n    senderEventPreprocessor = null,\n  ) {\n    super(\n      target,\n      (data, targetOrigin, transferList) => target.postMessage(data, transferList),\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n\n    this.type = type;\n  }\n}\n\nexport default AbstractDispatcher;\n","import { isObject } from '@actualwave/event-dispatcher';\nimport WorkerType from './WorkerType';\nimport { dispatchWorkerEvents } from './WorkerEvent';\nimport AbstractDispatcher from './AbstractDispatcher';\n\nconst getTarget = (worker) => {\n  // eslint-disable-next-line no-restricted-globals\n  let target = worker || self;\n\n  if (!isObject(target)) {\n    target = new Worker(String(worker));\n  }\n\n  return target;\n};\n\n/**\n *\n * @param target {Worker|String}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass DedicatedWorkerDispatcher extends AbstractDispatcher {\n  constructor(worker, receiverEventPreprocessor, senderEventPreprocessor) {\n    super(\n      WorkerType.DEDICATED_WORKER,\n      getTarget(worker),\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n\n    dispatchWorkerEvents(this.target, this.receiver);\n  }\n\n  terminate() {\n    return this.target.terminate();\n  }\n}\n\nexport default DedicatedWorkerDispatcher;\n","import { isObject } from '@actualwave/event-dispatcher';\nimport WorkerType from './WorkerType';\nimport { dispatchWorkerErrorEvent } from './WorkerEvent';\nimport AbstractDispatcher from './AbstractDispatcher';\n\nconst getTarget = (target, name) => {\n  if (!isObject(target)) {\n    return new SharedWorker(String(target), name);\n  }\n\n  return target;\n};\n\n/**\n *\n * @param worker {SharedWorker}\n * @param name {String}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends WorkerMessenger\n * @constructor\n */\nclass SharedWorkerDispatcher extends AbstractDispatcher {\n  constructor(target, name, receiverEventPreprocessor, senderEventPreprocessor) {\n    const worker = getTarget(target, name);\n\n    super(WorkerType.SHARED_WORKER, worker.port, receiverEventPreprocessor, senderEventPreprocessor);\n\n    this.worker = worker;\n\n    dispatchWorkerErrorEvent(this.worker, this.receiver);\n  }\n\n  start() {\n    this.target.start();\n  }\n\n  close() {\n    this.target.close();\n  }\n}\n\nexport default SharedWorkerDispatcher;\n","import WorkerType from '../WorkerType';\nimport AbstractDispatcher from '../AbstractDispatcher';\n\n/**\n * @param target {MessagePort}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass ClientDispatcher extends AbstractDispatcher {\n  constructor(target, receiverEventPreprocessor, senderEventPreprocessor) {\n    super(WorkerType.SHARED_WORKER_CLIENT, target, receiverEventPreprocessor, senderEventPreprocessor);\n  }\n\n  start() {\n    this.target.start();\n  }\n\n  close() {\n    this.target.close();\n  }\n}\n\nexport default ClientDispatcher;\n","import { createEventDispatcher } from '@actualwave/event-dispatcher';\nimport WorkerType from '../WorkerType';\nimport WorkerEvent, { dispatchWorkerEvents } from '../WorkerEvent';\nimport ClientDispatcher from './ClientDispatcher';\n\n/**\n * Read-only interface, mainly will listen to \"connect\" event.\n * You should listen to WorkerEvent.CONNECT to intercept client\n * instance to be able to communicate.\n * @param worker\n * @param receiverEventPreprocessor {?Function}\n * @constructor\n */\nclass ServerDispatcher {\n  constructor(\n    target = self, // eslint-disable-line no-restricted-globals\n    receiverEventPreprocessor,\n    clientReceiverEventPreprocessor,\n    clientSenderEventPreprocessor,\n  ) {\n    this.type = WorkerType.SHARED_WORKER_SERVER;\n    this.target = target;\n    this.clientFactory = (client) =>\n      new ClientDispatcher(client, clientReceiverEventPreprocessor, clientSenderEventPreprocessor);\n    this.receiver = createEventDispatcher(receiverEventPreprocessor);\n    this.target.addEventListener('connect', this.handleConnect);\n    dispatchWorkerEvents(this.target, this.receiver);\n  }\n\n  addEventListener = (...args) => this.receiver.addEventListener(...args);\n\n  hasEventListener = (...args) => this.receiver.hasEventListener(...args);\n\n  removeEventListener = (...args) => this.receiver.removeEventListener(...args);\n\n  removeAllEventListeners = (...args) => this.receiver.removeAllEventListeners(...args);\n\n  handleConnect = (event) => {\n    const [target] = event.ports;\n    const client = this.clientFactory(target);\n\n    this.receiver.dispatchEvent(new WorkerEvent(WorkerEvent.CONNECT, client, event, client));\n  };\n}\n\nexport default ServerDispatcher;\n","import WorkerType from './WorkerType';\nimport WorkerEvent from './WorkerEvent';\nimport DedicatedWorkerDispatcher from './DedicatedWorkerDispatcher';\nimport SharedWorkerDispatcher from './SharedWorkerDispatcher';\nimport ClientDispatcher from './sharedWorker/ClientDispatcher';\nimport ServerDispatcher from './sharedWorker/ServerDispatcher';\nimport { create, createForSelf } from './utils/create';\n\n\nconst CONNECT_EVENT = WorkerEvent.CONNECT;\nconst { DEDICATED_WORKER } = WorkerType;\nconst { SHARED_WORKER } = WorkerType;\n\nexport default DedicatedWorkerDispatcher;\n\nexport {\n  create,\n  createForSelf,\n  CONNECT_EVENT,\n  DEDICATED_WORKER,\n  SHARED_WORKER,\n  WorkerEvent,\n  WorkerType,\n  ClientDispatcher,\n  ServerDispatcher,\n  SharedWorkerDispatcher,\n  DedicatedWorkerDispatcher,\n};\n","import WorkerType from '../WorkerType';\nimport DedicatedWorkerDispatcher from '../DedicatedWorkerDispatcher';\nimport SharedWorkerDispatcher from '../SharedWorkerDispatcher';\nimport ClientDispatcher from '../sharedWorker/ClientDispatcher';\nimport ServerDispatcher from '../sharedWorker/ServerDispatcher';\n\n/**\n *\n * @param worker {String|Worker|SharedWorker|MessagePort}\n * @param type {String}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @returns {AbstractDispatcher}\n */\nexport const create = (target, type, receiverEventPreprocessor, senderEventPreprocessor) => {\n  switch (type) {\n    default:\n    case WorkerType.DEDICATED_WORKER:\n      return new DedicatedWorkerDispatcher(\n        target,\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n    case WorkerType.SHARED_WORKER:\n      return new SharedWorkerDispatcher(\n        target,\n        null,\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n    case WorkerType.SHARED_WORKER_SERVER:\n      return new ServerDispatcher(target, receiverEventPreprocessor);\n    case WorkerType.SHARED_WORKER_CLIENT:\n      return new ClientDispatcher(target, receiverEventPreprocessor, senderEventPreprocessor);\n  }\n};\n\n/**\n *\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @returns {AbstractDispatcher}\n */\nexport const createForSelf = (receiverEventPreprocessor, senderEventPreprocessor) => {\n  /* eslint-disable no-restricted-globals */\n  if (typeof self.postMessage === 'function') {\n    return new DedicatedWorkerDispatcher(self, receiverEventPreprocessor, senderEventPreprocessor);\n  }\n\n  return new ServerDispatcher(self, receiverEventPreprocessor);\n  /* eslint-enable no-restricted-globals */\n};\n"],"names":["WorkerType","DEDICATED_WORKER","SHARED_WORKER","SHARED_WORKER_SERVER","SHARED_WORKER_CLIENT","Object","defineProperty","exports","value","hasOwn","has","target","property","Boolean","call","prototype","hasOwnProperty","ex","require$$0","isObject","Event","[object Object]","type","data","this","defaultPrevented","getEvent","eventOrType","optionalData","event","String","ListenersRunner","listeners","onStopped","onComplete","index","immediatelyStopped","stopImmediatePropagation","listener","augmentEvent","length","clearEvent","eventObject","stopPropagation","EventListeners","_listeners","_runners","removeRunner","runner","splice","indexOf","eventType","priorityOpt","priority","parseInt","getPrioritiesByKey","key","handler","handlers","createList","push","result","priorities","list","getOwnPropertyNames","handlerIndex","forEach","listenerRemoved","stopped","sort","a","b","createRunner","run","EventDispatcher","eventPreprocessor","_eventPreprocessor","add","remove","removeAll","NativeEventTypes","WorkerEvent","constructor","sourceEvent","client","CONNECT","MESSAGE","ERROR","LANGUAGECHANGE","ONLINE","OFFLINE","dispatchWorkerEvent","source","getWorkerEventType","hasEventListener","dispatchEvent","addEventListener","dispatchWorkerEvents","dispatchWorkerErrorEvent","createId","Math","ceil","random","Date","now","toRawData","object","toJSON","JSON","stringify","parseRawData","eventDispatcher","parse","error","MessagePortEvent","dispatcherId","parseMessagePortEvent","isMessagePortEvent","MessagePortDispatcher","customPostMessageHandler","receiverEventPreprocessor","senderEventPreprocessor","targetOrigin","self","sender","createEventDispatcher","receiver","_postMessageListener","removeEventListener","removeAllEventListeners","transferList","eventJson","_postMessageHandler","postMessage","nativeEvent","message","createMessagePortDispatcher","factory","getTarget","dispatcher","getForSelf","getForParent","parent","getForTop","top","AbstractDispatcher","worker","Worker","DedicatedWorkerDispatcher","terminate","name","SharedWorker","SharedWorkerDispatcher","port","start","close","ClientDispatcher","ServerDispatcher","clientReceiverEventPreprocessor","clientSenderEventPreprocessor","clientFactory","handleConnect","args","ports","CONNECT_EVENT"],"mappings":"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"}