{"version":3,"file":"worker-dispatcher.min.js","sources":["../source/WorkerType.js","../node_modules/@actualwave/has-own/has-own.js","../node_modules/@actualwave/event-dispatcher/index.js","../source/WorkerEvent.js","../node_modules/@actualwave/messageport-dispatcher/index.js","../source/AbstractDispatcher.js","../source/DedicatedWorkerDispatcher.js","../source/SharedWorkerDispatcher.js","../source/sharedWorker/ClientDispatcher.js","../source/sharedWorker/ServerDispatcher.js","../source/ServiceWorkerDispatcher.js","../source/serviceWorker/ClientDispatcher.js","../source/serviceWorker/ServerDispatcher.js","../source/utils/create.js","../source/index.js"],"sourcesContent":["const WorkerType = {\n  DEDICATED_WORKER: 'dedicated',\n\n  SHARED_WORKER: 'shared',\n  /**\n   * @private\n   */\n  SHARED_WORKER_SERVER: 'sharedServer',\n  /**\n   * @private\n   */\n  SHARED_WORKER_CLIENT: 'sharedClient',\n\n  SERVICE_WORKER: 'service',\n  /**\n   * @private\n   */\n  SERVICE_WORKER_SERVER: 'serviceServer',\n  /**\n   * @private\n   */\n  SERVICE_WORKER_CLIENT: 'serviceClient',\n};\n\nexport default WorkerType;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst hasOwn = (\n  (has) =>\n  (target, property) =>\n  Boolean(target && has.call(target, property))\n)(Object.prototype.hasOwnProperty);\n\nexports.hasOwn = hasOwn;\nexports.default = hasOwn;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\n\n/**\n *      \n */\n\n/* eslint-disable import/prefer-default-export */\nconst isObject = value => typeof value === 'object' && value !== null;\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass Event {\n  constructor(type, data = null) {\n    this.type = type;\n    this.data = data;\n    this.defaultPrevented = false;\n  }\n\n  toJSON() {\n    return {\n      type: this.type,\n      data: this.data\n    };\n  }\n\n  isDefaultPrevented() {\n    return this.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n}\nconst getEvent = (eventOrType, optionalData) => {\n  let event = eventOrType;\n\n  if (!isObject(eventOrType)) {\n    event = new Event(String(eventOrType), optionalData);\n  }\n\n  return event;\n};\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass ListenersRunner {\n  constructor(listeners, onStopped, onComplete) {\n    this.index = -1;\n    this.immediatelyStopped = false;\n\n    this.stopImmediatePropagation = () => {\n      this.immediatelyStopped = true;\n    };\n\n    this.listeners = listeners;\n    this.onStopped = onStopped;\n    this.onComplete = onComplete;\n  }\n\n  run(event, target) {\n    let listener;\n    const {\n      listeners\n    } = this;\n    this.augmentEvent(event); // TODO this has to be handled in separate object ListenersRunner that should be\n    // created for each call() call and asked for index validation on each listener remove.\n\n    for (this.index = 0; this.index < listeners.length; this.index++) {\n      if (this.immediatelyStopped) break;\n      listener = listeners[this.index];\n      listener.call(target, event);\n    }\n\n    this.clearEvent(event);\n    this.onComplete(this);\n  }\n\n  augmentEvent(eventObject) {\n    const event = eventObject;\n    event.stopPropagation = this.onStopped;\n    event.stopImmediatePropagation = this.stopImmediatePropagation;\n  }\n  /* eslint class-methods-use-this: \"off\" */\n\n\n  clearEvent(eventObject) {\n    const event = eventObject;\n    delete event.stopPropagation;\n    delete event.stopImmediatePropagation;\n  }\n\n  listenerRemoved(listeners, index) {\n    if (listeners === this.listeners && index <= this.index) {\n      this.index--;\n    }\n  }\n\n}\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\nclass EventListeners {\n  constructor() {\n    this._listeners = {};\n    this._runners = [];\n\n    this.removeRunner = runner => {\n      this._runners.splice(this._runners.indexOf(runner), 1);\n    };\n  }\n\n  createList(eventType, priorityOpt) {\n    const priority = parseInt(priorityOpt, 10);\n    const target = this.getPrioritiesByKey(eventType);\n    const key = String(priority);\n    let value;\n\n    if (hasOwn(target, key)) {\n      value = target[key];\n    } else {\n      value = [];\n      target[key] = value;\n    }\n\n    return value;\n  }\n\n  getPrioritiesByKey(key) {\n    let value;\n\n    if (hasOwn(this._listeners, key)) {\n      value = this._listeners[key];\n    } else {\n      value = {};\n      this._listeners[key] = value;\n    }\n\n    return value;\n  }\n\n  add(eventType, handler, priority) {\n    const handlers = this.createList(eventType, priority);\n\n    if (handlers.indexOf(handler) < 0) {\n      handlers.push(handler);\n    }\n  }\n\n  has(eventType) {\n    let priority;\n    let result = false;\n    const priorities = this.getPrioritiesByKey(eventType);\n\n    if (priorities) {\n      for (priority in priorities) {\n        if (hasOwn(priorities, priority)) {\n          result = true;\n          break;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  remove(eventType, handler) {\n    const priorities = this.getPrioritiesByKey(eventType);\n\n    if (priorities) {\n      const list = Object.getOwnPropertyNames(priorities);\n      const {\n        length\n      } = list;\n\n      for (let index = 0; index < length; index++) {\n        const priority = list[index];\n        const handlers = priorities[priority];\n        const handlerIndex = handlers.indexOf(handler);\n\n        if (handlerIndex >= 0) {\n          handlers.splice(handlerIndex, 1);\n\n          if (!handlers.length) {\n            delete priorities[priority];\n          }\n\n          this._runners.forEach(runner => {\n            runner.listenerRemoved(handlers, handlerIndex);\n          });\n        }\n      }\n    }\n  }\n\n  removeAll(eventType) {\n    delete this._listeners[eventType];\n  }\n\n  createRunner(handlers, onStopped) {\n    const runner = new ListenersRunner(handlers, onStopped, this.removeRunner);\n\n    this._runners.push(runner);\n\n    return runner;\n  }\n\n  call(event, target) {\n    const priorities = this.getPrioritiesByKey(event.type);\n    let stopped = false;\n\n    const stopPropagation = () => {\n      stopped = true;\n    };\n\n    if (priorities) {\n      // getOwnPropertyNames() or keys()?\n      const list = Object.getOwnPropertyNames(priorities).sort((a, b) => a - b);\n      const {\n        length\n      } = list;\n\n      for (let index = 0; index < length; index++) {\n        if (stopped) break;\n        const handlers = priorities[list[index]]; // in case if all handlers of priority were removed while event\n        // was dispatched and handlers become undefined.\n\n        if (handlers) {\n          const runner = this.createRunner(handlers, stopPropagation);\n          runner.run(event, target);\n          if (runner.immediatelyStopped) break;\n        }\n      }\n    }\n  }\n\n}\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n *      \n */\n\nclass EventDispatcher {\n  constructor(eventPreprocessor = null) {\n    this._eventPreprocessor = eventPreprocessor;\n    this._listeners = new EventListeners();\n  }\n\n  addEventListener(eventType, listener, priority = 0) {\n    this._listeners.add(eventType, listener, -priority || 0);\n  }\n\n  hasEventListener(eventType) {\n    return this._listeners.has(eventType);\n  }\n\n  removeEventListener(eventType, listener) {\n    this._listeners.remove(eventType, listener);\n  }\n\n  removeAllEventListeners(eventType) {\n    this._listeners.removeAll(eventType);\n  }\n\n  dispatchEvent(event, data) {\n    let eventObject = getEvent(event, data);\n\n    if (this._eventPreprocessor) {\n      eventObject = this._eventPreprocessor.call(this, eventObject);\n    }\n\n    this._listeners.call(eventObject);\n  }\n\n}\n\nconst createEventDispatcher = eventPreprocessor => new EventDispatcher(eventPreprocessor);\n\nexports.default = EventDispatcher;\nexports.Event = Event;\nexports.EventDispatcher = EventDispatcher;\nexports.createEventDispatcher = createEventDispatcher;\nexports.getEvent = getEvent;\nexports.isObject = isObject;\n//# sourceMappingURL=index.js.map\n","import { Event } from '@actualwave/event-dispatcher';\n\nexport const NativeEventType = {\n  CONNECT: 'connect',\n  MESSAGE: 'message',\n  ERROR: 'error',\n  MESSAGEERROR: 'messageerror',\n  LANGUAGECHANGE: 'languagechange',\n  ONLINE: 'online',\n  OFFLINE: 'offline',\n\n  /* Service Worker specific events */\n  INSTALL: 'install',\n  ACTIVATE: 'activate',\n  FETCH: 'fetch',\n  SYNC: 'sync',\n  PUSH: 'push',\n};\n\nclass WorkerEvent extends Event {\n  static CONNECT = 'worker:connect';\n\n  static MESSAGE = 'worker:message';\n\n  static ERROR = 'worker:error';\n\n  static MESSAGEERROR = 'messageerror';\n\n  static LANGUAGECHANGE = 'worker:languagechange';\n\n  static ONLINE = 'worker:online';\n\n  static OFFLINE = 'worker:offline';\n\n  /* Service Worker specific events */\n\n  static INSTALL: 'worker:install';\n\n  static ACTIVATE: 'worker:activate';\n\n  static FETCH: 'worker:fetch';\n\n  static SYNC: 'worker:sync';\n\n  static PUSH: 'worker:push';\n\n  constructor(type, data, nativeEvent, client) {\n    super(type, data);\n    this.nativeEvent = nativeEvent;\n    this.client = client;\n  }\n}\n\nexport const getWorkerEventType = (type) => {\n  switch (type) {\n    case NativeEventType.CONNECT:\n      return WorkerEvent.CONNECT;\n    case NativeEventType.MESSAGE:\n      return WorkerEvent.MESSAGE;\n    case NativeEventType.ERROR:\n      return WorkerEvent.ERROR;\n    case NativeEventType.MESSAGEERROR:\n      return WorkerEvent.MESSAGEERROR;\n    case NativeEventType.LANGUAGECHANGE:\n      return WorkerEvent.LANGUAGECHANGE;\n    case NativeEventType.ONLINE:\n      return WorkerEvent.ONLINE;\n    case NativeEventType.OFFLINE:\n      return WorkerEvent.OFFLINE;\n\n    /* Service Worker specific events */\n    case NativeEventType.INSTALL:\n      return WorkerEvent.INSTALL;\n    case NativeEventType.ACTIVATE:\n      return WorkerEvent.ACTIVATE;\n    case NativeEventType.FETCH:\n      return WorkerEvent.FETCH;\n    case NativeEventType.SYNC:\n      return WorkerEvent.SYNC;\n    case NativeEventType.PUSH:\n      return WorkerEvent.PUSH;\n    default:\n      return type;\n  }\n};\n\nexport const dispatchWorkerEvent = (type, source, target) => {\n  const eventType = getWorkerEventType(type);\n\n  const handler = (event) => {\n    if (target.hasEventListener(eventType)) {\n      target.dispatchEvent(new WorkerEvent(eventType, event, event));\n    }\n  };\n\n  source.addEventListener(type, handler);\n  return handler;\n};\n\nexport const dispatchWorkerEvents = (source, target) => {\n  dispatchWorkerEvent(NativeEventType.ERROR, source, target);\n  dispatchWorkerEvent(NativeEventType.LANGUAGECHANGE, source, target);\n  dispatchWorkerEvent(NativeEventType.ONLINE, source, target);\n  dispatchWorkerEvent(NativeEventType.OFFLINE, source, target);\n};\n\nexport const dispatchServiceWorkerEvents = (source, target) => {\n  dispatchWorkerEvent(NativeEventType.INSTALL, source, target);\n  dispatchWorkerEvent(NativeEventType.ACTIVATE, source, target);\n  dispatchWorkerEvent(NativeEventType.FETCH, source, target);\n  dispatchWorkerEvent(NativeEventType.SYNC, source, target);\n  dispatchWorkerEvent(NativeEventType.PUSH, source, target);\n};\n\nexport const dispatchWorkerErrorEvent = (source, target) => {\n  dispatchWorkerEvent(NativeEventType.ERROR, source, target);\n  dispatchWorkerEvent(NativeEventType.MESSAGEERROR, source, target);\n};\n\nexport default WorkerEvent;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar eventDispatcher = require('@actualwave/event-dispatcher');\nvar hasOwn = _interopDefault(require('@actualwave/has-own'));\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n */\nconst createId = () => `MP/${Math.ceil(Math.random() * 10000)}/${Date.now()}`;\n/**\n * If toJSON method implemented on object, it will be called instead of converting to JSON string.\n * This was made to utilize structured cloning algorithm for raw objects.\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\n * In this case developer is responsible for converting linked objects.\n * @param object\n * @returns {Object}\n */\n\nconst toRawData = object => {\n  if (typeof object.toJSON === 'function') {\n    return object.toJSON();\n  }\n\n  return JSON.stringify(object);\n};\n/**\n *\n * @param data {Object|String}\n * @returns {Object}\n */\n\nconst parseRawData = data => {\n  let object; // keep it undefined in case of error\n\n  if (eventDispatcher.isObject(data)) {\n    return data;\n  }\n\n  try {\n    return JSON.parse(data);\n  } catch (error) {// this isn't an event we are waiting for.\n  }\n\n  return object;\n};\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n */\nclass MessagePortEvent {\n  constructor(event, dispatcherId) {\n    this.event = event;\n    this.dispatcherId = dispatcherId;\n  }\n\n  toJSON() {\n    return {\n      event: toRawData(this.event),\n      dispatcherId: this.dispatcherId\n    };\n  }\n\n}\nconst isMessagePortEvent = object => eventDispatcher.isObject(object) && hasOwn(object, 'dispatcherId') && hasOwn(object, 'event');\nconst parseMessagePortEvent = object => {\n  const result = parseRawData(object);\n\n  if (result && isMessagePortEvent(result)) {\n    const {\n      event,\n      dispatcherId\n    } = result;\n    return new MessagePortEvent(parseRawData(event), dispatcherId);\n  }\n\n  return null;\n};\n\n/**\n * Created by Oleg Galaburda on 09.02.16.\n */\nclass MessagePortDispatcher {\n  constructor(target = null, customPostMessageHandler = null, receiverEventPreprocessor = null, senderEventPreprocessor = null) {\n    this.dispatcherId = createId();\n    this.targetOrigin = '*';\n    this.target = target || self;\n    this.customPostMessageHandler = customPostMessageHandler;\n    this.senderEventPreprocessor = senderEventPreprocessor;\n    this.sender = eventDispatcher.createEventDispatcher();\n    this.receiver = eventDispatcher.createEventDispatcher(receiverEventPreprocessor);\n    this.target.addEventListener('message', event => this._postMessageListener(event));\n  }\n\n  addEventListener(eventType, listener, priority) {\n    this.receiver.addEventListener(eventType, listener, priority);\n  }\n\n  hasEventListener(eventType) {\n    return this.receiver.hasEventListener(eventType);\n  }\n\n  removeEventListener(eventType, listener) {\n    this.receiver.removeEventListener(eventType, listener);\n  }\n\n  removeAllEventListeners(eventType) {\n    this.receiver.removeAllEventListeners(eventType);\n  }\n\n  dispatchEvent(eventType, data, transferList) {\n    let event = eventDispatcher.getEvent(eventType, data);\n\n    if (this.senderEventPreprocessor) {\n      event = this.senderEventPreprocessor.call(this, event);\n    }\n\n    const eventJson = toRawData(new MessagePortEvent(event, this.dispatcherId));\n    return this._postMessageHandler(eventJson, transferList);\n  }\n  /**\n   * @private\n   */\n\n\n  _postMessageHandler(data, transferList) {\n    const handler = this.customPostMessageHandler;\n\n    if (handler) {\n      return handler.call(this, data, this.targetOrigin, transferList);\n    }\n\n    return this.target.postMessage(data, this.targetOrigin, transferList);\n  }\n  /**\n   * @private\n   */\n\n\n  _postMessageListener(event) {\n    // INFO .nativeEvent react-native thing, it contains event object coming from WebView\n    event = event.nativeEvent || event;\n    const message = parseMessagePortEvent(event.data);\n\n    if (message) {\n      if (message.dispatcherId === this.dispatcherId) {\n        this.sender.dispatchEvent(message.event);\n      } else {\n        this.receiver.dispatchEvent(message.event);\n      }\n    }\n  }\n\n}\nconst createMessagePortDispatcher = (target, customPostMessageHandler, receiverEventPreprocessor, senderEventPreprocessor) => new MessagePortDispatcher(target, customPostMessageHandler, receiverEventPreprocessor, senderEventPreprocessor);\nconst factory = (getTarget, dispatcher = null) => () => {\n  if (!dispatcher) {\n    dispatcher = createMessagePortDispatcher(getTarget());\n  }\n\n  return dispatcher;\n};\nconst getForSelf = factory(() => self);\nconst getForParent = factory(() => parent);\nconst getForTop = factory(() => top);\n\nexports.MessagePortDispatcher = MessagePortDispatcher;\nexports.MessagePortEvent = MessagePortEvent;\nexports.createMessagePortDispatcher = createMessagePortDispatcher;\nexports.default = MessagePortDispatcher;\nexports.factory = factory;\nexports.getForParent = getForParent;\nexports.getForSelf = getForSelf;\nexports.getForTop = getForTop;\nexports.isMessagePortEvent = isMessagePortEvent;\nexports.parseMessagePortEvent = parseMessagePortEvent;\n//# sourceMappingURL=index.js.map\n","import MessagePortDispatcher from '@actualwave/messageport-dispatcher';\n\n/**\n *\n * @param target {String|Worker}\n * @param customPostMessageHandler {?Function}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass AbstractDispatcher extends MessagePortDispatcher {\n  constructor(\n    type,\n    target,\n    receiverEventPreprocessor = null,\n    senderEventPreprocessor = null,\n  ) {\n    super(\n      target,\n      (data, targetOrigin, transferList) => target.postMessage(data, transferList),\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n\n    this.type = type;\n  }\n}\n\nexport default AbstractDispatcher;\n","import { isObject } from '@actualwave/event-dispatcher';\nimport WorkerType from './WorkerType';\nimport { dispatchWorkerEvents } from './WorkerEvent';\nimport AbstractDispatcher from './AbstractDispatcher';\n\nconst getTarget = (worker) => {\n  // eslint-disable-next-line no-restricted-globals\n  let target = worker || self;\n\n  if (!isObject(target)) {\n    target = new Worker(String(worker));\n  }\n\n  return target;\n};\n\n/**\n *\n * @param target {Worker|String}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass DedicatedWorkerDispatcher extends AbstractDispatcher {\n  constructor(worker, receiverEventPreprocessor, senderEventPreprocessor) {\n    super(\n      WorkerType.DEDICATED_WORKER,\n      getTarget(worker),\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n\n    dispatchWorkerEvents(this.target, this.receiver);\n  }\n\n  terminate() {\n    return this.target.terminate();\n  }\n}\n\nexport default DedicatedWorkerDispatcher;\n","import { isObject } from '@actualwave/event-dispatcher';\nimport WorkerType from './WorkerType';\nimport { dispatchWorkerErrorEvent } from './WorkerEvent';\nimport AbstractDispatcher from './AbstractDispatcher';\n\nconst getTarget = (target, name) => {\n  if (!isObject(target)) {\n    return new SharedWorker(String(target), name);\n  }\n\n  return target;\n};\n\n/**\n *\n * @param worker {SharedWorker}\n * @param name {String}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends WorkerMessenger\n * @constructor\n */\nclass SharedWorkerDispatcher extends AbstractDispatcher {\n  constructor(\n    target,\n    name,\n    receiverEventPreprocessor,\n    senderEventPreprocessor,\n  ) {\n    const worker = getTarget(target, name);\n\n    super(\n      WorkerType.SHARED_WORKER,\n      worker.port,\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n\n    this.worker = worker;\n\n    dispatchWorkerErrorEvent(this.worker, this.receiver);\n\n    this.start();\n  }\n\n  start() {\n    this.target.start();\n  }\n\n  close() {\n    this.target.close();\n  }\n}\n\nexport default SharedWorkerDispatcher;\n","import WorkerType from '../WorkerType';\nimport AbstractDispatcher from '../AbstractDispatcher';\n\n/**\n * @param target {MessagePort}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass SharedClientDispatcher extends AbstractDispatcher {\n  constructor(target, receiverEventPreprocessor, senderEventPreprocessor) {\n    super(\n      WorkerType.SHARED_WORKER_CLIENT,\n      target,\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n  }\n\n  start() {\n    this.target.start();\n  }\n\n  close() {\n    this.target.close();\n  }\n}\n\nexport default SharedClientDispatcher;\n","/* eslint-disable no-restricted-globals */\nimport { createEventDispatcher } from '@actualwave/event-dispatcher';\nimport WorkerType from '../WorkerType';\nimport WorkerEvent, {\n  NativeEventType,\n  dispatchWorkerEvents,\n} from '../WorkerEvent';\nimport SharedClientDispatcher from './ClientDispatcher';\n\n/**\n * Read-only interface, mainly will listen to \"connect\" event.\n * You should listen to WorkerEvent.CONNECT to intercept client\n * instance to be able to communicate.\n * @param worker\n * @param receiverEventPreprocessor {?Function}\n * @constructor\n */\nclass SharedServerDispatcher {\n  constructor(\n    target = self,\n    receiverEventPreprocessor,\n    clientReceiverEventPreprocessor,\n    clientSenderEventPreprocessor,\n  ) {\n    this.type = WorkerType.SHARED_WORKER_SERVER;\n    this.target = target;\n    this.clientFactory = (client) => new SharedClientDispatcher(\n      client,\n      clientReceiverEventPreprocessor,\n      clientSenderEventPreprocessor,\n    );\n    this.receiver = createEventDispatcher(receiverEventPreprocessor);\n    this.target.addEventListener(NativeEventType.CONNECT, this.handleConnect);\n    dispatchWorkerEvents(this.target, this.receiver);\n  }\n\n  addEventListener = (...args) => this.receiver.addEventListener(...args);\n\n  hasEventListener = (...args) => this.receiver.hasEventListener(...args);\n\n  removeEventListener = (...args) => this.receiver.removeEventListener(...args);\n\n  removeAllEventListeners = (...args) => this.receiver.removeAllEventListeners(...args);\n\n  handleConnect = (event) => {\n    const [target] = event.ports;\n    const client = this.clientFactory(target);\n\n    this.receiver.dispatchEvent(\n      new WorkerEvent(WorkerEvent.CONNECT, client, event, client),\n    );\n  };\n}\n\nexport default SharedServerDispatcher;\n","/* eslint-disable class-methods-use-this */\nimport WorkerType from './WorkerType';\nimport { dispatchWorkerErrorEvent } from './WorkerEvent';\nimport AbstractDispatcher from './AbstractDispatcher';\n\nconst getServiceWorker = async () => {\n  await navigator.serviceWorker.ready;\n  const registration = await navigator.serviceWorker.getRegistration();\n\n  return registration.active;\n};\n\nconst createTarget = () => {\n  const channel = new MessageChannel();\n  let neutered = false;\n\n  return {\n    postMessage: async (message) => {\n      const worker = await getServiceWorker();\n\n      if(neutered) {\n        return worker.postMessage(message);\n      }\n\n      neutered = true;\n      \n      return worker.postMessage(message, [channel.port2]);\n    },\n    get onmessage() {\n      return channel.port1.onmessage;\n    },\n    set onmessage(handler) {\n      channel.port1.onmessage = handler;\n    },\n    start: () => {\n      channel.port1.start();\n    },\n    close: () => {\n      channel.port1.close();\n    },\n    addEventListener: (...args) => channel.port1.addEventListener(...args),\n  };\n};\n\n/**\n *\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends WorkerMessenger\n * @constructor\n */\nclass ServiceWorkerDispatcher extends AbstractDispatcher {\n  constructor(receiverEventPreprocessor, senderEventPreprocessor) {\n    super(\n      WorkerType.SERVICE_WORKER,\n      createTarget(),\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n\n    this.start();\n\n    dispatchWorkerErrorEvent(this.target, this.receiver);\n  }\n\n  start() {\n    return this.target.start();\n  }\n\n  close() {\n    return this.target.close();\n  }\n\n  onReady(handler) {\n    return navigator.serviceWorker.ready.then(handler);\n  }\n\n  get ready() {\n    return navigator.serviceWorker.ready;\n  }\n}\n\nexport default ServiceWorkerDispatcher;\n","import WorkerType from '../WorkerType';\nimport AbstractDispatcher from '../AbstractDispatcher';\n\n/**\n * @param target {MessagePort}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @extends MessagePortDispatcher\n * @constructor\n */\nclass ServiceClientDispatcher extends AbstractDispatcher {\n  constructor(target, receiverEventPreprocessor, senderEventPreprocessor) {\n    super(\n      WorkerType.SERVICE_WORKER_CLIENT,\n      target,\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n  }\n\n  start() {\n    this.target.start();\n  }\n\n  close() {\n    this.target.close();\n  }\n}\n\nexport default ServiceClientDispatcher;\n","/* eslint-disable no-restricted-globals */\nimport { createEventDispatcher } from '@actualwave/event-dispatcher';\nimport { parseMessagePortEvent } from '@actualwave/messageport-dispatcher';\nimport WorkerType from '../WorkerType';\nimport WorkerEvent, {\n  NativeEventType,\n  dispatchWorkerErrorEvent,\n} from '../WorkerEvent';\nimport ServiceClientDispatcher from './ClientDispatcher';\n\n/**\n * Read-only interface, mainly will listen to \"connect\" event.\n * You should listen to WorkerEvent.CONNECT to intercept client\n * instance to be able to communicate.\n * @param worker\n * @param receiverEventPreprocessor {?Function}\n * @constructor\n */\nclass ServiceServerDispatcher {\n  constructor(\n    target = self,\n    receiverEventPreprocessor,\n    clientReceiverEventPreprocessor,\n    clientSenderEventPreprocessor,\n  ) {\n    this.type = WorkerType.SERVICE_WORKER_SERVER;\n    this.target = target;\n\n    this.clientFactory = (port) => {\n      if (!port) {\n        return null;\n      }\n\n      return new ServiceClientDispatcher(\n        port,\n        clientReceiverEventPreprocessor,\n        clientSenderEventPreprocessor,\n      );\n    };\n\n    this.receiver = createEventDispatcher(receiverEventPreprocessor);\n\n    dispatchWorkerErrorEvent(target, this.receiver);\n    target.addEventListener(NativeEventType.MESSAGE, (event) => this._postMessageListener(event),\n    );\n  }\n\n  addEventListener = (...args) => this.receiver.addEventListener(...args);\n\n  hasEventListener = (...args) => this.receiver.hasEventListener(...args);\n\n  removeEventListener = (...args) => this.receiver.removeEventListener(...args);\n\n  removeAllEventListeners = (...args) => this.receiver.removeAllEventListeners(...args);\n\n  /**\n   * @private\n   */\n  _postMessageListener(nativeEvent) {\n    const {\n      data: rawMessage,\n      ports: [client],\n    } = nativeEvent;\n\n    if (!rawMessage) {\n      return;\n    }\n\n    const {\n      event: { type: eventType, data: eventData },\n    } = parseMessagePortEvent(rawMessage);\n\n    const event = new WorkerEvent(\n      eventType,\n      eventData,\n      nativeEvent,\n      this.clientFactory(client),\n    );\n\n    this.receiver.dispatchEvent(event);\n  }\n}\n\nexport default ServiceServerDispatcher;\n","/* eslint-disable no-restricted-globals */\nimport WorkerType from '../WorkerType';\nimport DedicatedWorkerDispatcher from '../DedicatedWorkerDispatcher';\nimport SharedWorkerDispatcher from '../SharedWorkerDispatcher';\nimport SharedClientDispatcher from '../sharedWorker/ClientDispatcher';\nimport SharedServerDispatcher from '../sharedWorker/ServerDispatcher';\nimport ServiceWorkerDispatcher from '../ServiceWorkerDispatcher';\nimport ServiceClientDispatcher from '../serviceWorker/ClientDispatcher';\nimport ServiceServerDispatcher from '../serviceWorker/ServerDispatcher';\n\nexport const createForDedicatedWorker = (\n  target,\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n) => new DedicatedWorkerDispatcher(\n  target,\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n);\n\nexport const createForSharedWorker = (\n  target,\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n) => new SharedWorkerDispatcher(\n  target,\n  null,\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n);\n\nexport const createForServiceWorker = (\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n) => new ServiceWorkerDispatcher(\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n);\n\n/**\n *\n * @param worker {String|Worker|SharedWorker|MessagePort}\n * @param type {String}\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @returns {AbstractDispatcher}\n */\nexport const create = (\n  target,\n  type,\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n) => {\n  switch (type) {\n    default:\n    case WorkerType.DEDICATED_WORKER:\n      return createForDedicatedWorker(\n        target,\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n    case WorkerType.SHARED_WORKER:\n      return createForSharedWorker(\n        target,\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n    case WorkerType.SHARED_WORKER_SERVER:\n      return new SharedServerDispatcher(target, receiverEventPreprocessor);\n    case WorkerType.SHARED_WORKER_CLIENT:\n      return new SharedClientDispatcher(\n        target,\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n    case WorkerType.SERVICE_WORKER:\n      return createForServiceWorker(\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n    case WorkerType.SERVICE_WORKER_SERVER:\n      return new ServiceServerDispatcher(target, receiverEventPreprocessor);\n    case WorkerType.SERVICE_WORKER_CLIENT:\n      return new ServiceClientDispatcher(\n        target,\n        receiverEventPreprocessor,\n        senderEventPreprocessor,\n      );\n  }\n};\n\n/**\n *\n * @param receiverEventPreprocessor {?Function}\n * @param senderEventPreprocessor {?Function}\n * @returns {AbstractDispatcher}\n */\nexport const createForSelf = (\n  receiverEventPreprocessor,\n  senderEventPreprocessor,\n) => {\n  // Only dedicated WebWorker has postMessage since they have single client\n  if (typeof self.postMessage === 'function') {\n    return new DedicatedWorkerDispatcher(\n      self,\n      receiverEventPreprocessor,\n      senderEventPreprocessor,\n    );\n  }\n\n  // Only ServiceWorker has registration object\n  if (self.registration && typeof self.registration.scope === 'string') {\n    return new ServiceServerDispatcher(self, receiverEventPreprocessor);\n  }\n\n  return new SharedServerDispatcher(self, receiverEventPreprocessor);\n};\n","import WorkerType from './WorkerType';\nimport WorkerEvent, { NativeEventType } from './WorkerEvent';\nimport DedicatedWorkerDispatcher from './DedicatedWorkerDispatcher';\nimport SharedWorkerDispatcher from './SharedWorkerDispatcher';\nimport SharedClientDispatcher from './sharedWorker/ClientDispatcher';\nimport SharedServerDispatcher from './sharedWorker/ServerDispatcher';\nimport ServiceWorkerDispatcher from './ServiceWorkerDispatcher';\nimport ServiceClientDispatcher from './serviceWorker/ClientDispatcher';\nimport ServiceServerDispatcher from './serviceWorker/ServerDispatcher';\nimport {\n  create,\n  createForSelf,\n  createForDedicatedWorker,\n  createForSharedWorker,\n  createForServiceWorker,\n} from './utils/create';\n\nconst CONNECT_EVENT = WorkerEvent.CONNECT;\nconst { DEDICATED_WORKER, SHARED_WORKER, SERVICE_WORKER } = WorkerType;\n\nexport default DedicatedWorkerDispatcher;\n\nexport {\n  create,\n  createForSelf,\n  createForDedicatedWorker,\n  createForSharedWorker,\n  createForServiceWorker,\n  CONNECT_EVENT,\n  DEDICATED_WORKER,\n  SHARED_WORKER,\n  SERVICE_WORKER,\n  WorkerEvent,\n  WorkerType,\n  NativeEventType,\n  SharedClientDispatcher,\n  SharedServerDispatcher,\n  SharedWorkerDispatcher,\n  ServiceWorkerDispatcher,\n  ServiceClientDispatcher,\n  ServiceServerDispatcher,\n  DedicatedWorkerDispatcher,\n};\n"],"names":["WorkerType","DEDICATED_WORKER","SHARED_WORKER","SHARED_WORKER_SERVER","SHARED_WORKER_CLIENT","SERVICE_WORKER","SERVICE_WORKER_SERVER","SERVICE_WORKER_CLIENT","Object","defineProperty","exports","value","hasOwn","has","target","property","Boolean","call","prototype","hasOwnProperty","ex","require$$0","isObject","Event","[object Object]","type","data","this","defaultPrevented","getEvent","eventOrType","optionalData","event","String","ListenersRunner","listeners","onStopped","onComplete","index","immediatelyStopped","stopImmediatePropagation","listener","augmentEvent","length","clearEvent","eventObject","stopPropagation","EventListeners","_listeners","_runners","removeRunner","runner","splice","indexOf","eventType","priorityOpt","priority","parseInt","getPrioritiesByKey","key","handler","handlers","createList","push","result","priorities","list","getOwnPropertyNames","handlerIndex","forEach","listenerRemoved","stopped","sort","a","b","createRunner","run","EventDispatcher","eventPreprocessor","_eventPreprocessor","add","remove","removeAll","NativeEventType","CONNECT","MESSAGE","ERROR","MESSAGEERROR","LANGUAGECHANGE","ONLINE","OFFLINE","INSTALL","ACTIVATE","FETCH","SYNC","PUSH","WorkerEvent","constructor","nativeEvent","client","dispatchWorkerEvent","source","getWorkerEventType","hasEventListener","dispatchEvent","addEventListener","dispatchWorkerEvents","dispatchWorkerErrorEvent","createId","Math","ceil","random","Date","now","toRawData","object","toJSON","JSON","stringify","parseRawData","eventDispatcher","parse","error","MessagePortEvent","dispatcherId","isMessagePortEvent","parseMessagePortEvent","MessagePortDispatcher","customPostMessageHandler","receiverEventPreprocessor","senderEventPreprocessor","targetOrigin","self","sender","createEventDispatcher","receiver","_postMessageListener","removeEventListener","removeAllEventListeners","transferList","eventJson","_postMessageHandler","postMessage","message","createMessagePortDispatcher","factory","getTarget","dispatcher","getForSelf","getForParent","parent","getForTop","top","AbstractDispatcher","worker","Worker","DedicatedWorkerDispatcher","terminate","name","SharedWorker","SharedWorkerDispatcher","port","start","close","SharedClientDispatcher","SharedServerDispatcher","clientReceiverEventPreprocessor","clientSenderEventPreprocessor","clientFactory","handleConnect","args","ports","createTarget","channel","MessageChannel","neutered","async","navigator","serviceWorker","ready","getRegistration","active","getServiceWorker","port2","port1","onmessage","ServiceWorkerDispatcher","onReady","then","ServiceClientDispatcher","ServiceServerDispatcher","rawMessage","eventData","createForDedicatedWorker","createForSharedWorker","createForServiceWorker","CONNECT_EVENT","registration","scope"],"mappings":"6MAAA,MAAMA,EAAa,CACjBC,iBAAkB,YAElBC,cAAe,SAIfC,qBAAsB,eAItBC,qBAAsB,eAEtBC,eAAgB,UAIhBC,sBAAuB,gBAIvBC,sBAAuB,wMCnBzBC,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAEtD,MAAMC,EAAS,CACZC,GACD,CAACC,EAAQC,IACTC,QAAQF,GAAUD,EAAII,KAAKH,EAAQC,IAHtB,CAIbP,OAAOU,UAAUC,gBAEnBT,SAAiBE,EACjBF,UAAkBE,wCCTlBJ,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAItD,IAF0BS,EAEtBR,GAFsBQ,EAEGC,IAFgC,iBAAPD,GAAoB,YAAaA,EAAMA,EAAY,QAAIA,EAS7G,MAAME,EAAWX,GAA0B,iBAAVA,GAAgC,OAAVA,EAMvD,MAAMY,EACJC,YAAYC,EAAMC,EAAO,MACvBC,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,EACZC,KAAKC,kBAAmB,EAG1BJ,SACE,MAAO,CACLC,KAAME,KAAKF,KACXC,KAAMC,KAAKD,MAIfF,qBACE,OAAOG,KAAKC,iBAGdJ,iBACEG,KAAKC,kBAAmB,GAI5B,MAAMC,EAAW,CAACC,EAAaC,KAC7B,IAAIC,EAAQF,EAMZ,OAJKR,EAASQ,KACZE,EAAQ,IAAIT,EAAMU,OAAOH,GAAcC,IAGlCC,GAOT,MAAME,EACJV,YAAYW,EAAWC,EAAWC,GAChCV,KAAKW,OAAS,EACdX,KAAKY,oBAAqB,EAE1BZ,KAAKa,yBAA2B,KAC9Bb,KAAKY,oBAAqB,GAG5BZ,KAAKQ,UAAYA,EACjBR,KAAKS,UAAYA,EACjBT,KAAKU,WAAaA,EAGpBb,IAAIQ,EAAOlB,GACT,IAAI2B,EACJ,MAAMN,UACJA,GACER,KAIJ,IAHAA,KAAKe,aAAaV,GAGbL,KAAKW,MAAQ,EAAGX,KAAKW,MAAQH,EAAUQ,SACtChB,KAAKY,mBADyCZ,KAAKW,SAEvDG,EAAWN,EAAUR,KAAKW,QACjBrB,KAAKH,EAAQkB,GAGxBL,KAAKiB,WAAWZ,GAChBL,KAAKU,WAAWV,MAGlBH,aAAaqB,GACX,MAAMb,EAAQa,EACdb,EAAMc,gBAAkBnB,KAAKS,UAC7BJ,EAAMQ,yBAA2Bb,KAAKa,yBAKxChB,WAAWqB,GACT,MAAMb,EAAQa,SACPb,EAAMc,uBACNd,EAAMQ,yBAGfhB,gBAAgBW,EAAWG,GACrBH,IAAcR,KAAKQ,WAAaG,GAASX,KAAKW,OAChDX,KAAKW,SAUX,MAAMS,EACJvB,cACEG,KAAKqB,WAAa,GAClBrB,KAAKsB,SAAW,GAEhBtB,KAAKuB,aAAeC,IAClBxB,KAAKsB,SAASG,OAAOzB,KAAKsB,SAASI,QAAQF,GAAS,IAIxD3B,WAAW8B,EAAWC,GACpB,MAAMC,EAAWC,SAASF,EAAa,IACjCzC,EAASa,KAAK+B,mBAAmBJ,GACjCK,EAAM1B,OAAOuB,GACnB,IAAI7C,EASJ,OAPIC,EAAOE,EAAQ6C,GACjBhD,EAAQG,EAAO6C,IAEfhD,EAAQ,GACRG,EAAO6C,GAAOhD,GAGTA,EAGTa,mBAAmBmC,GACjB,IAAIhD,EASJ,OAPIC,EAAOe,KAAKqB,WAAYW,GAC1BhD,EAAQgB,KAAKqB,WAAWW,IAExBhD,EAAQ,GACRgB,KAAKqB,WAAWW,GAAOhD,GAGlBA,EAGTa,IAAI8B,EAAWM,EAASJ,GACtB,MAAMK,EAAWlC,KAAKmC,WAAWR,EAAWE,GAExCK,EAASR,QAAQO,GAAW,GAC9BC,EAASE,KAAKH,GAIlBpC,IAAI8B,GACF,IAAIE,EACAQ,GAAS,EACb,MAAMC,EAAatC,KAAK+B,mBAAmBJ,GAE3C,GAAIW,EACF,IAAKT,KAAYS,EACf,GAAIrD,EAAOqD,EAAYT,GAAW,CAChCQ,GAAS,EACT,MAKN,OAAOA,EAGTxC,OAAO8B,EAAWM,GAChB,MAAMK,EAAatC,KAAK+B,mBAAmBJ,GAE3C,GAAIW,EAAY,CACd,MAAMC,EAAO1D,OAAO2D,oBAAoBF,IAClCtB,OACJA,GACEuB,EAEJ,IAAK,IAAI5B,EAAQ,EAAGA,EAAQK,EAAQL,IAAS,CAC3C,MAAMkB,EAAWU,EAAK5B,GAChBuB,EAAWI,EAAWT,GACtBY,EAAeP,EAASR,QAAQO,GAElCQ,GAAgB,IAClBP,EAAST,OAAOgB,EAAc,GAEzBP,EAASlB,eACLsB,EAAWT,GAGpB7B,KAAKsB,SAASoB,QAAQlB,IACpBA,EAAOmB,gBAAgBT,EAAUO,QAO3C5C,UAAU8B,UACD3B,KAAKqB,WAAWM,GAGzB9B,aAAaqC,EAAUzB,GACrB,MAAMe,EAAS,IAAIjB,EAAgB2B,EAAUzB,EAAWT,KAAKuB,cAI7D,OAFAvB,KAAKsB,SAASc,KAAKZ,GAEZA,EAGT3B,KAAKQ,EAAOlB,GACV,MAAMmD,EAAatC,KAAK+B,mBAAmB1B,EAAMP,MACjD,IAAI8C,GAAU,EAEd,MAAMzB,EAAkB,KACtByB,GAAU,GAGZ,GAAIN,EAAY,CAEd,MAAMC,EAAO1D,OAAO2D,oBAAoBF,GAAYO,KAAK,CAACC,EAAGC,IAAMD,EAAIC,IACjE/B,OACJA,GACEuB,EAEJ,IAAK,IAAI5B,EAAQ,EAAGA,EAAQK,IACtB4B,EAD8BjC,IAAS,CAE3C,MAAMuB,EAAWI,EAAWC,EAAK5B,IAGjC,GAAIuB,EAAU,CACZ,MAAMV,EAASxB,KAAKgD,aAAad,EAAUf,GAE3C,GADAK,EAAOyB,IAAI5C,EAAOlB,GACdqC,EAAOZ,mBAAoB,UAazC,MAAMsC,EACJrD,YAAYsD,EAAoB,MAC9BnD,KAAKoD,mBAAqBD,EAC1BnD,KAAKqB,WAAa,IAAID,EAGxBvB,iBAAiB8B,EAAWb,EAAUe,EAAW,GAC/C7B,KAAKqB,WAAWgC,IAAI1B,EAAWb,GAAWe,GAAY,GAGxDhC,iBAAiB8B,GACf,OAAO3B,KAAKqB,WAAWnC,IAAIyC,GAG7B9B,oBAAoB8B,EAAWb,GAC7Bd,KAAKqB,WAAWiC,OAAO3B,EAAWb,GAGpCjB,wBAAwB8B,GACtB3B,KAAKqB,WAAWkC,UAAU5B,GAG5B9B,cAAcQ,EAAON,GACnB,IAAImB,EAAchB,EAASG,EAAON,GAE9BC,KAAKoD,qBACPlC,EAAclB,KAAKoD,mBAAmB9D,KAAKU,KAAMkB,IAGnDlB,KAAKqB,WAAW/B,KAAK4B,IAOzBnC,UAAkBmE,EAClBnE,QAAgBa,EAChBb,kBAA0BmE,EAC1BnE,wBAL8BoE,GAAqB,IAAID,EAAgBC,GAMvEpE,WAAmBmB,EACnBnB,WAAmBY,qGCtSN6D,EAAkB,CAC7BC,QAAS,UACTC,QAAS,UACTC,MAAO,QACPC,aAAc,eACdC,eAAgB,iBAChBC,OAAQ,SACRC,QAAS,UAGTC,QAAS,UACTC,SAAU,WACVC,MAAO,QACPC,KAAM,OACNC,KAAM,QAGR,MAAMC,UAAoBzE,EA2BxB0E,YAAYxE,EAAMC,EAAMwE,EAAaC,SAC7B1E,EAAMC,QACPwE,YAAcA,OACdC,OAASA,GA9BZH,EACGZ,QAAU,iBADbY,EAGGX,QAAU,iBAHbW,EAKGV,MAAQ,eALXU,EAOGT,aAAe,eAPlBS,EASGR,eAAiB,wBATpBQ,EAWGP,OAAS,gBAXZO,EAaGN,QAAU,iBAqBZ,MAiCMU,EAAsB,CAAC3E,EAAM4E,EAAQvF,WAC1CwC,EAlC2B7B,CAAAA,WACzBA,QACD0D,EAAgBC,eACZY,EAAYZ,aAChBD,EAAgBE,eACZW,EAAYX,aAChBF,EAAgBG,aACZU,EAAYV,WAChBH,EAAgBI,oBACZS,EAAYT,kBAChBJ,EAAgBK,sBACZQ,EAAYR,oBAChBL,EAAgBM,cACZO,EAAYP,YAChBN,EAAgBO,eACZM,EAAYN,aAGhBP,EAAgBQ,eACZK,EAAYL,aAChBR,EAAgBS,gBACZI,EAAYJ,cAChBT,EAAgBU,aACZG,EAAYH,WAChBV,EAAgBW,YACZE,EAAYF,UAChBX,EAAgBY,YACZC,EAAYD,oBAEZtE,IAKO6E,CAAmB7E,GAE/BmC,EAAW5B,IACXlB,EAAOyF,iBAAiBjD,IAC1BxC,EAAO0F,cAAc,IAAIR,EAAY1C,EAAWtB,EAAOA,YAI3DqE,EAAOI,iBAAiBhF,EAAMmC,GACvBA,GAGI8C,EAAuB,CAACL,EAAQvF,KAC3CsF,EAAoBjB,EAAgBG,MAAOe,EAAQvF,GACnDsF,EAAoBjB,EAAgBK,eAAgBa,EAAQvF,GAC5DsF,EAAoBjB,EAAgBM,OAAQY,EAAQvF,GACpDsF,EAAoBjB,EAAgBO,QAASW,EAAQvF,IAW1C6F,EAA2B,CAACN,EAAQvF,KAC/CsF,EAAoBjB,EAAgBG,MAAOe,EAAQvF,GACnDsF,EAAoBjB,EAAgBI,aAAcc,EAAQvF,0BClH5DN,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAKtD,IAH0BS,EAGtBR,GAHsBQ,EAGGC,IAHgC,iBAAPD,GAAoB,YAAaA,EAAMA,EAAY,QAAIA,EAQ7G,MAAMwF,EAAW,UAAYC,KAAKC,KAAqB,IAAhBD,KAAKE,aAAqBC,KAAKC,QAUhEC,EAAYC,GACa,mBAAlBA,EAAOC,OACTD,EAAOC,SAGTC,KAAKC,UAAUH,GAQlBI,EAAe7F,IAGnB,GAAI8F,EAAgBlG,SAASI,GAC3B,OAAOA,EAGT,IACE,OAAO2F,KAAKI,MAAM/F,GAClB,MAAOgG,MASX,MAAMC,EACJnG,YAAYQ,EAAO4F,GACjBjG,KAAKK,MAAQA,EACbL,KAAKiG,aAAeA,EAGtBpG,SACE,MAAO,CACLQ,MAAOkF,EAAUvF,KAAKK,OACtB4F,aAAcjG,KAAKiG,eAKzB,MAAMC,EAAqBV,GAAUK,EAAgBlG,SAAS6F,IAAWvG,EAAOuG,EAAQ,iBAAmBvG,EAAOuG,EAAQ,SACpHW,EAAwBX,IAC5B,MAAMnD,EAASuD,EAAaJ,GAE5B,GAAInD,GAAU6D,EAAmB7D,GAAS,CACxC,MAAMhC,MACJA,EAAK4F,aACLA,GACE5D,EACJ,OAAO,IAAI2D,EAAiBJ,EAAavF,GAAQ4F,GAGnD,OAAO,MAMT,MAAMG,EACJvG,YAAYV,EAAS,KAAMkH,EAA2B,KAAMC,EAA4B,KAAMC,EAA0B,MACtHvG,KAAKiG,aAAehB,IACpBjF,KAAKwG,aAAe,IACpBxG,KAAKb,OAASA,GAAUsH,KACxBzG,KAAKqG,yBAA2BA,EAChCrG,KAAKuG,wBAA0BA,EAC/BvG,KAAK0G,OAASb,EAAgBc,wBAC9B3G,KAAK4G,SAAWf,EAAgBc,sBAAsBL,GACtDtG,KAAKb,OAAO2F,iBAAiB,UAAWzE,GAASL,KAAK6G,qBAAqBxG,IAG7ER,iBAAiB8B,EAAWb,EAAUe,GACpC7B,KAAK4G,SAAS9B,iBAAiBnD,EAAWb,EAAUe,GAGtDhC,iBAAiB8B,GACf,OAAO3B,KAAK4G,SAAShC,iBAAiBjD,GAGxC9B,oBAAoB8B,EAAWb,GAC7Bd,KAAK4G,SAASE,oBAAoBnF,EAAWb,GAG/CjB,wBAAwB8B,GACtB3B,KAAK4G,SAASG,wBAAwBpF,GAGxC9B,cAAc8B,EAAW5B,EAAMiH,GAC7B,IAAI3G,EAAQwF,EAAgB3F,SAASyB,EAAW5B,GAE5CC,KAAKuG,0BACPlG,EAAQL,KAAKuG,wBAAwBjH,KAAKU,KAAMK,IAGlD,MAAM4G,EAAY1B,EAAU,IAAIS,EAAiB3F,EAAOL,KAAKiG,eAC7D,OAAOjG,KAAKkH,oBAAoBD,EAAWD,GAO7CnH,oBAAoBE,EAAMiH,GACxB,MAAM/E,EAAUjC,KAAKqG,yBAErB,OAAIpE,EACKA,EAAQ3C,KAAKU,KAAMD,EAAMC,KAAKwG,aAAcQ,GAG9ChH,KAAKb,OAAOgI,YAAYpH,EAAMC,KAAKwG,aAAcQ,GAO1DnH,qBAAqBQ,GAEnBA,EAAQA,EAAMkE,aAAelE,EAC7B,MAAM+G,EAAUjB,EAAsB9F,EAAMN,MAExCqH,IACEA,EAAQnB,eAAiBjG,KAAKiG,aAChCjG,KAAK0G,OAAO7B,cAAcuC,EAAQ/G,OAElCL,KAAK4G,SAAS/B,cAAcuC,EAAQ/G,SAM5C,MAAMgH,EAA8B,CAAClI,EAAQkH,EAA0BC,EAA2BC,IAA4B,IAAIH,EAAsBjH,EAAQkH,EAA0BC,EAA2BC,GAC/Me,EAAU,CAACC,EAAWC,EAAa,OAAS,KAC3CA,IACHA,EAAaH,EAA4BE,MAGpCC,GAEHC,EAAaH,EAAQ,IAAMb,MAC3BiB,EAAeJ,EAAQ,IAAMK,QAC7BC,EAAYN,EAAQ,IAAMO,KAEhC9I,wBAAgCqH,EAChCrH,mBAA2BiH,EAC3BjH,8BAAsCsI,EACtCtI,UAAkBqH,EAClBrH,UAAkBuI,EAClBvI,eAAuB2I,EACvB3I,aAAqB0I,EACrB1I,YAAoB6I,EACpB7I,qBAA6BmH,EAC7BnH,wBAAgCoH,uLCvKhC,MAAM2B,UAA2B1B,EAC/B9B,YACExE,EACAX,EACAmH,EAA4B,KAC5BC,EAA0B,YAGxBpH,EACA,CAACY,EAAMyG,EAAcQ,IAAiB7H,EAAOgI,YAAYpH,EAAMiH,GAC/DV,EACAC,QAGGzG,KAAOA,GCpBhB,MAAMyH,EAAaQ,QAEb5I,EAAS4I,GAAUtB,YAElB9G,EAASR,KACZA,EAAS,IAAI6I,OAAO1H,OAAOyH,KAGtB5I,GAWT,MAAM8I,UAAkCH,EACtCxD,YAAYyD,EAAQzB,EAA2BC,SAE3ClI,EAAWC,iBACXiJ,EAAUQ,GACVzB,EACAC,GAGFxB,EAAqB/E,KAAKb,OAAQa,KAAK4G,UAGzCsB,mBACSlI,KAAKb,OAAO+I,aChCvB,MAAMX,EAAY,CAACpI,EAAQgJ,IACpBxI,EAASR,GAIPA,EAHE,IAAIiJ,aAAa9H,OAAOnB,GAASgJ,GAe5C,MAAME,UAA+BP,EACnCxD,YACEnF,EACAgJ,EACA7B,EACAC,SAEMwB,EAASR,EAAUpI,EAAQgJ,SAG/B9J,EAAWE,cACXwJ,EAAOO,KACPhC,EACAC,QAGGwB,OAASA,EAEd/C,EAAyBhF,KAAK+H,OAAQ/H,KAAK4G,eAEtC2B,QAGPA,aACOpJ,OAAOoJ,QAGdC,aACOrJ,OAAOqJ,SCxChB,MAAMC,UAA+BX,EACnCxD,YAAYnF,EAAQmH,EAA2BC,SAE3ClI,EAAWI,qBACXU,EACAmH,EACAC,GAIJgC,aACOpJ,OAAOoJ,QAGdC,aACOrJ,OAAOqJ,SCRhB,MAAME,EACJpE,YACEnF,EAASsH,KACTH,EACAqC,EACAC,qBAEK9I,KAAOzB,EAAWG,0BAClBW,OAASA,OACT0J,cAAiBrE,GAAW,IAAIiE,EACnCjE,EACAmE,EACAC,QAEGhC,SAAWD,EAAsBL,QACjCnH,OAAO2F,iBAAiBtB,EAAgBC,QAASzD,KAAK8I,eAC3D/D,EAAqB/E,KAAKb,OAAQa,KAAK4G,iCAGzC9B,iBAAmB,IAAIiE,IAAS/I,KAAK4G,SAAS9B,oBAAoBiE,QAElEnE,iBAAmB,IAAImE,IAAS/I,KAAK4G,SAAShC,oBAAoBmE,QAElEjC,oBAAsB,IAAIiC,IAAS/I,KAAK4G,SAASE,uBAAuBiC,QAExEhC,wBAA0B,IAAIgC,IAAS/I,KAAK4G,SAASG,2BAA2BgC,QAEhFD,cAAiBzI,UACRlB,GAAUkB,EAAM2I,MACjBxE,EAASxE,KAAK6I,cAAc1J,QAE7ByH,SAAS/B,cACZ,IAAIR,EAAYA,EAAYZ,QAASe,EAAQnE,EAAOmE,MC5C1D,MAOMyE,EAAe,WACbC,EAAU,IAAIC,mBAChBC,GAAW,QAER,CACLjC,YAAakC,MAAAA,UACLtB,OAbasB,wBACjBC,UAAUC,cAAcC,aACHF,UAAUC,cAAcE,mBAE/BC,QASKC,UAElBP,EACMrB,EAAOZ,YAAYC,IAG5BgC,GAAW,EAEJrB,EAAOZ,YAAYC,EAAS,CAAC8B,EAAQU,iCAGrCV,EAAQW,MAAMC,yBAET7H,GACZiH,EAAQW,MAAMC,UAAY7H,GAE5BsG,MAAO,KACLW,EAAQW,MAAMtB,SAEhBC,MAAO,KACLU,EAAQW,MAAMrB,SAEhB1D,iBAAkB,IAAIiE,IAASG,EAAQW,MAAM/E,oBAAoBiE,KAWrE,MAAMgB,UAAgCjC,EACpCxD,YAAYgC,EAA2BC,SAEnClI,EAAWK,eACXuK,IACA3C,EACAC,QAGGgC,QAELvD,EAAyBhF,KAAKb,OAAQa,KAAK4G,UAG7C2B,eACSvI,KAAKb,OAAOoJ,QAGrBC,eACSxI,KAAKb,OAAOqJ,QAGrBwB,QAAQ/H,UACCqH,UAAUC,cAAcC,MAAMS,KAAKhI,sBAInCqH,UAAUC,cAAcC,OCpEnC,MAAMU,UAAgCpC,EACpCxD,YAAYnF,EAAQmH,EAA2BC,SAE3ClI,EAAWO,sBACXO,EACAmH,EACAC,GAIJgC,aACOpJ,OAAOoJ,QAGdC,aACOrJ,OAAOqJ,SCPhB,MAAM2B,EACJ7F,YACEnF,EAASsH,KACTH,EACAqC,EACAC,QAwBF9D,iBAAmB,IAAIiE,IAAS/I,KAAK4G,SAAS9B,oBAAoBiE,QAElEnE,iBAAmB,IAAImE,IAAS/I,KAAK4G,SAAShC,oBAAoBmE,QAElEjC,oBAAsB,IAAIiC,IAAS/I,KAAK4G,SAASE,uBAAuBiC,QAExEhC,wBAA0B,IAAIgC,IAAS/I,KAAK4G,SAASG,2BAA2BgC,QA5BzEjJ,KAAOzB,EAAWM,2BAClBQ,OAASA,OAET0J,cAAiBP,GACfA,EAIE,IAAI4B,EACT5B,EACAK,EACAC,GANO,UAUNhC,SAAWD,EAAsBL,GAEtCtB,EAAyB7F,EAAQa,KAAK4G,UACtCzH,EAAO2F,iBAAiBtB,EAAgBE,QAAUrD,GAAUL,KAAK6G,qBAAqBxG,IAexFwG,qBAAqBtC,SAEjBxE,KAAMqK,EACNpB,OAAQxE,IACND,MAEC6F,eAKH/J,OAASP,KAAM6B,EAAW5B,KAAMsK,IAC9BlE,EAAsBiE,GAEpB/J,EAAQ,IAAIgE,EAChB1C,EACA0I,EACA9F,EACAvE,KAAK6I,cAAcrE,SAGhBoC,SAAS/B,cAAcxE,UCrEnBiK,EAA2B,CACtCnL,EACAmH,EACAC,IACG,IAAI0B,EACP9I,EACAmH,EACAC,GAGWgE,EAAwB,CACnCpL,EACAmH,EACAC,IACG,IAAI8B,EACPlJ,EACA,KACAmH,EACAC,GAGWiE,EAAyB,CACpClE,EACAC,IACG,IAAIwD,EACPzD,EACAC,GCnBIkE,EAAgBpG,EAAYZ,SAC5BnF,iBAAEA,EAAFC,cAAoBA,EAApBG,eAAmCA,GAAmBL,6UD6BtC,CACpBc,EACAW,EACAwG,EACAC,YAEQzG,gBAEDzB,EAAWC,wBACPgM,EACLnL,EACAmH,EACAC,QAEClI,EAAWE,qBACPgM,EACLpL,EACAmH,EACAC,QAEClI,EAAWG,4BACP,IAAIkK,EAAuBvJ,EAAQmH,QACvCjI,EAAWI,4BACP,IAAIgK,EACTtJ,EACAmH,EACAC,QAEClI,EAAWK,sBACP8L,EACLlE,EACAC,QAEClI,EAAWM,6BACP,IAAIwL,EAAwBhL,EAAQmH,QACxCjI,EAAWO,6BACP,IAAIsL,EACT/K,EACAmH,EACAC,kDAWqB,CAC3BD,EACAC,IAGgC,mBAArBE,KAAKU,YACP,IAAIc,EACTxB,KACAH,EACAC,GAKAE,KAAKiE,cAAmD,iBAA5BjE,KAAKiE,aAAaC,MACzC,IAAIR,EAAwB1D,KAAMH,GAGpC,IAAIoC,EAAuBjC,KAAMH"}